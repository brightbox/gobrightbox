// Code generated by go generate; DO NOT EDIT.

package brightbox

import (
	"path"
	"testing"
	"time"

	"gotest.tools/v3/assert"
)

func TestFirewallRules(t *testing.T) {
	instance := testAll(
		t,
		(*Client).FirewallRules,
		"FirewallRule",
		"firewall_rules",
		"FirewallRules",
	)
	assert.Equal(t, instance.ID, "fwr-k32ls")
}

func TestFirewallRule(t *testing.T) {
	instance := testInstance(
		t,
		(*Client).FirewallRule,
		"FirewallRule",
		path.Join("firewall_rules", "fwr-k32ls"),
		"firewall_rule",
		"fwr-k32ls",
	)
	assert.Equal(t, instance.ID, "fwr-k32ls")
}

func TestCreateFirewallRule(t *testing.T) {
	newResource := FirewallRuleOptions{}
	instance := testModify(
		t,
		(*Client).CreateFirewallRule,
		newResource,
		"firewall_rule",
		"POST",
		path.Join("firewall_rules"),
		"{}",
	)
	assert.Equal(t, instance.ID, "fwr-k32ls")
}

func TestUpdateFirewallRule(t *testing.T) {
	updatedResource := FirewallRuleOptions{ID: "fwr-k32ls"}
	instance := testModify(
		t,
		(*Client).UpdateFirewallRule,
		updatedResource,
		"firewall_rule",
		"PUT",
		path.Join("firewall_rules", updatedResource.ID),
		"{}",
	)
	assert.Equal(t, instance.ID, updatedResource.ID)
}

func TestDestroyFirewallRule(t *testing.T) {
	deletedResource := testModify(
		t,
		(*Client).DestroyFirewallRule,
		"fwr-k32ls",
		"firewall_rule",
		"DELETE",
		path.Join("firewall_rules", "fwr-k32ls"),
		"",
	)
	assert.Equal(t, deletedResource.ID, "fwr-k32ls")
}

func TestFirewallRuleCreatedAtUnix(t *testing.T) {
	tm := time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)
	target := FirewallRule{CreatedAt: &tm}
	assert.Equal(t, target.CreatedAtUnix(), tm.Unix())
}
