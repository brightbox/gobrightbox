// Code generated by generate_enum; DO NOT EDIT.

// Package collaborationstatus is an enumeration of the states Pending, Accepted, Rejected, Cancelled, Ended
package collaborationstatus

import (
	"encoding/json"
	"fmt"
	"reflect"
)

// Enum is an enumerated type
type Enum uint8

const (
	// Pending is an enumeration for collaborationstatus.Enum
	Pending Enum = iota + 1
	// Accepted is an enumeration for collaborationstatus.Enum
	Accepted
	// Rejected is an enumeration for collaborationstatus.Enum
	Rejected
	// Cancelled is an enumeration for collaborationstatus.Enum
	Cancelled
	// Ended is an enumeration for collaborationstatus.Enum
	Ended
)

// ValidStrings is the set of strings that are valid inputs to ParseEnum
var ValidStrings = []string{
	Pending.String(),
	Accepted.String(),
	Rejected.String(),
	Cancelled.String(),
	Ended.String(),
}

// String makes Enum satisfy the Stringer interface
func (i Enum) String() string {
	tmp, err := i.MarshalText()
	if err == nil {
		return string(tmp)
	}
	return ""
}

// ParseEnum attempts to convert a string into a Enum
func ParseEnum(name string) (Enum, error) {
	switch name {
	case "pending":
		return Pending, nil
	case "accepted":
		return Accepted, nil
	case "rejected":
		return Rejected, nil
	case "cancelled":
		return Cancelled, nil
	case "ended":
		return Ended, nil
	}
	var zero Enum
	return zero, fmt.Errorf("%s is not a valid collaborationstatus.Enum", name)
}

// MarshalText implements the text marshaller method
func (i Enum) MarshalText() ([]byte, error) {
	switch i {
	case Pending:
		return []byte("pending"), nil
	case Accepted:
		return []byte("accepted"), nil
	case Rejected:
		return []byte("rejected"), nil
	case Cancelled:
		return []byte("cancelled"), nil
	case Ended:
		return []byte("ended"), nil
	}
	return nil, fmt.Errorf("%d is not a valid collaborationstatus.Enum", i)
}

// UnmarshalText implements the text unmarshaller method
func (i *Enum) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEnum(name)
	if err != nil {
		return &json.UnmarshalTypeError{
			Value: name,
			Type:  reflect.TypeOf(*i),
		}
	}
	*i = tmp
	return nil
}
