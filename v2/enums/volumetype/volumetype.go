// Code generated by generate_enum; DO NOT EDIT.

package volumetype

import (
	"encoding/json"
	"fmt"
	"reflect"
)

// Enum is an enumerated type
type Enum uint8

const (
	// Image is an enumeration for volumetype.Enum
	Image Enum = iota + 1
	// Volume is an enumeration for Enum
	Volume
	// Raw is an enumeration for Enum
	Raw
)

// Set of strings that are valid inputs for ParseEnum
var ValidStrings = []string{
	Image.String(),
	Volume.String(),
	Raw.String(),
}

// String makes Enum satisfy the Stringer interface
func (i Enum) String() string {
	tmp, err := i.MarshalText()
	if err == nil {
		return string(tmp)
	}
	return ""
}

// ParseEnum attempts to convert a string into a Enum
func ParseEnum(name string) (Enum, error) {
	switch name {
	case "image":
		return Image, nil
	case "volume":
		return Volume, nil
	case "raw":
		return Raw, nil
	}
	var zero Enum
	return zero, fmt.Errorf("%s is not a valid volumetype.Enum", name)
}

// MarshalText implements the text marshaller method
func (i Enum) MarshalText() ([]byte, error) {
	switch i {
	case Image:
		return []byte("image"), nil
	case Volume:
		return []byte("volume"), nil
	case Raw:
		return []byte("raw"), nil
	}
	return nil, fmt.Errorf("%d is not a valid volumetype.Enum", i)
}

// UnmarshalText implements the text unmarshaller method
func (i *Enum) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseEnum(name)
	if err != nil {
		return &json.UnmarshalTypeError{
			Value: name,
			Type:  reflect.TypeOf(*i),
		}
	}
	*i = tmp
	return nil
}
