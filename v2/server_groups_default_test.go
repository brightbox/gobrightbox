// Code generated by go generate; DO NOT EDIT.

package brightbox

import (
	"path"
	"testing"
	"time"

	"gotest.tools/v3/assert"
)

func TestServerGroups(t *testing.T) {
	instance := testAll[ServerGroup](
		t,
		(*Client).ServerGroups,
		"ServerGroup",
		"server_groups",
		"ServerGroups",
	)
	assert.Equal(t, instance.ID, "grp-sda44")
}

func TestServerGroup(t *testing.T) {
	instance := testInstance[ServerGroup](
		t,
		(*Client).ServerGroup,
		"ServerGroup",
		path.Join("server_groups", "grp-sda44"),
		"server_group",
		"grp-sda44",
	)
	assert.Equal(t, instance.ID, "grp-sda44")
}

func TestCreateServerGroup(t *testing.T) {
	newResource := ServerGroupOptions{}
	instance := testModify[ServerGroup, ServerGroupOptions](
		t,
		(*Client).CreateServerGroup,
		newResource,
		"server_group",
		"POST",
		path.Join("server_groups"),
		"{}",
	)
	assert.Equal(t, instance.ID, "grp-sda44")
}

func TestUpdateServerGroup(t *testing.T) {
	updatedResource := ServerGroupOptions{ID: "grp-sda44"}
	instance := testModify[ServerGroup, ServerGroupOptions](
		t,
		(*Client).UpdateServerGroup,
		updatedResource,
		"server_group",
		"PUT",
		path.Join("server_groups", updatedResource.ID),
		"{}",
	)
	assert.Equal(t, instance.ID, updatedResource.ID)
}

func TestDestroyServerGroup(t *testing.T) {
	deletedResource := testModify[ServerGroup, string](
		t,
		(*Client).DestroyServerGroup,
		"grp-sda44",
		"server_group",
		"DELETE",
		path.Join("server_groups", "grp-sda44"),
		"",
	)
	assert.Equal(t, deletedResource.ID, "grp-sda44")
}

func TestServerGroupCreatedAtUnix(t *testing.T) {
	tm := time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)
	target := ServerGroup{CreatedAt: &tm}
	assert.Equal(t, target.CreatedAtUnix(), tm.Unix())
}
