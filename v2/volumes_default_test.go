// Code generated by go generate; DO NOT EDIT.

package brightbox

import (
	"path"
	"testing"

	"gotest.tools/v3/assert"
)

func TestVolumes(t *testing.T) {
	instance := testAll[Volume](
		t,
		(*Client).Volumes,
		"Volume",
		"volumes",
		"Volumes",
	)
	assert.Equal(t, instance.ID, "vol-po5we")
}

func TestVolume(t *testing.T) {
	instance := testInstance[Volume](
		t,
		(*Client).Volume,
		"Volume",
		path.Join("volumes", "vol-po5we"),
		"volume",
		"vol-po5we",
	)
	assert.Equal(t, instance.ID, "vol-po5we")
}

func TestCreateVolume(t *testing.T) {
	newResource := VolumeOptions{}
	instance := testModify[Volume, VolumeOptions](
		t,
		(*Client).CreateVolume,
		newResource,
		"volume",
		"POST",
		path.Join("volumes"),
		"{}",
	)
	assert.Equal(t, instance.ID, "vol-po5we")
}

func TestUpdateVolume(t *testing.T) {
	updatedResource := VolumeOptions{ID: "vol-po5we"}
	instance := testModify[Volume, VolumeOptions](
		t,
		(*Client).UpdateVolume,
		updatedResource,
		"volume",
		"PUT",
		path.Join("volumes", updatedResource.ID),
		"{}",
	)
	assert.Equal(t, instance.ID, updatedResource.ID)
}

func TestDestroyVolume(t *testing.T) {
	deletedResource := testModify[Volume, string](
		t,
		(*Client).DestroyVolume,
		"vol-po5we",
		"volume",
		"DELETE",
		path.Join("volumes", "vol-po5we"),
		"",
	)
	assert.Equal(t, deletedResource.ID, "vol-po5we")
}

func TestLockVolume(t *testing.T) {
	lockedResource := testModify[Volume, string](
		t,
		(*Client).LockVolume,
		"vol-po5we",
		"volume",
		"PUT",
		path.Join("volumes", "vol-po5we", "lock_resource"),
		"",
	)
	assert.Equal(t, lockedResource.ID, "vol-po5we")
}

func TestUnlockVolume(t *testing.T) {
	unlockedResource := testModify[Volume, string](
		t,
		(*Client).UnlockVolume,
		"vol-po5we",
		"volume",
		"PUT",
		path.Join("volumes", "vol-po5we", "unlock_resource"),
		"",
	)
	assert.Equal(t, unlockedResource.ID, "vol-po5we")
}
