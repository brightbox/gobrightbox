// Code generated by generate_enum; DO NOT EDIT.

package servertype

import "fmt"

// Status is an enumerated type
type Status uint8

const (
	// Experimental is an enumeration for servertype.Status
	Experimental Status = iota + 1
	// Available is an enumeration for Status
	Available
	// Deprecated is an enumeration for Status
	Deprecated
)

// Set of strings that are valid inputs for ParseStatus
var ValidStrings = []string{
	Experimental.String(),
	Available.String(),
	Deprecated.String(),
}

// String makes Status satisfy the Stringer interface
func (i Status) String() string {
	tmp, err := i.MarshalText()
	if err == nil {
		return string(tmp)
	}
	return ""
}

// ParseStatus attempts to convert a string into a Status
func ParseStatus(name string) (Status, error) {
	switch name {
	case "experimental":
		return Experimental, nil
	case "available":
		return Available, nil
	case "deprecated":
		return Deprecated, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid servertype.Status", name)
}

// MarshalText implements the text marshaller method
func (i Status) MarshalText() ([]byte, error) {
	switch i {
	case Experimental:
		return []byte("experimental"), nil
	case Available:
		return []byte("available"), nil
	case Deprecated:
		return []byte("deprecated"), nil
	}
	return nil, fmt.Errorf("%v is not a valid servertype.Status", i)
}

// UnmarshalText implements the text unmarshaller method
func (i *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*i = tmp
	return nil
}
