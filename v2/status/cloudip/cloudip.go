// Code generated by generate_enum; DO NOT EDIT.

package cloudip

import "fmt"

// Status is an enumerated type
type Status uint8

const (
	// Mapped is an enumeration for cloudip.Status
	Mapped Status = iota + 1
	// Unmapped is an enumeration for Status
	Unmapped
)

// Set of strings that are valid inputs for ParseStatus
var ValidStrings = []string{
	Mapped.String(),
	Unmapped.String(),
}

// String makes Status satisfy the Stringer interface
func (i Status) String() string {
	tmp, err := i.MarshalText()
	if err == nil {
		return string(tmp)
	}
	return ""
}

// ParseStatus attempts to convert a string into a Status
func ParseStatus(name string) (Status, error) {
	switch name {
	case "mapped":
		return Mapped, nil
	case "unmapped":
		return Unmapped, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid cloudip.Status", name)
}

// MarshalText implements the text marshaller method
func (i Status) MarshalText() ([]byte, error) {
	switch i {
	case Mapped:
		return []byte("mapped"), nil
	case Unmapped:
		return []byte("unmapped"), nil
	}
	return nil, fmt.Errorf("%d is not a valid cloudip.Status", i)
}

// UnmarshalText implements the text unmarshaller method
func (i *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*i = tmp
	return nil
}
