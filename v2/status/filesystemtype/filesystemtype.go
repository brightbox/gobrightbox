// Code generated by generate_enum; DO NOT EDIT.

package filesystemtype

import (
	"encoding/json"
	"fmt"
	"reflect"
)

// Status is an enumerated type
type Status uint8

const (
	// Xfs is an enumeration for filesystemtype.Status
	Xfs Status = iota + 1
	// Ext4 is an enumeration for Status
	Ext4
)

// Set of strings that are valid inputs for ParseStatus
var ValidStrings = []string{
	Xfs.String(),
	Ext4.String(),
}

// String makes Status satisfy the Stringer interface
func (i Status) String() string {
	tmp, err := i.MarshalText()
	if err == nil {
		return string(tmp)
	}
	return ""
}

// ParseStatus attempts to convert a string into a Status
func ParseStatus(name string) (Status, error) {
	switch name {
	case "xfs":
		return Xfs, nil
	case "ext4":
		return Ext4, nil
	}
	var zero Status
	return zero, fmt.Errorf("%s is not a valid filesystemtype.Status", name)
}

// MarshalText implements the text marshaller method
func (i Status) MarshalText() ([]byte, error) {
	switch i {
	case Xfs:
		return []byte("xfs"), nil
	case Ext4:
		return []byte("ext4"), nil
	}
	return nil, fmt.Errorf("%d is not a valid filesystemtype.Status", i)
}

// UnmarshalText implements the text unmarshaller method
func (i *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return &json.UnmarshalTypeError{
			Value: name,
			Type:  reflect.TypeOf(i),
		}
	}
	*i = tmp
	return nil
}
