// Code generated by generate_enum; DO NOT EDIT.

package teststatus

import "fmt"

// Status is an enumerated type
type Status uint8

const (
	// Hello is an enumeration for teststatus.Status
	Hello Status = iota
	// Goodbye is an enumeration for Status
	Goodbye
)

// String makes Status satisfy the Stringer interface
func (i Status) String() string {
	tmp, err := i.MarshalText()
	if err == nil {
		return string(tmp)
	}
	return ""
}

// ParseStatus attempts to convert a string into a Status
func ParseStatus(name string) (Status, error) {
	switch name {
	case "hello":
		return Hello, nil
	case "goodbye":
		return Goodbye, nil
	}
	return Status(0), fmt.Errorf("%s is not a valid teststatus.Status", name)
}

// MarshalText implements the text marshaller method
func (i Status) MarshalText() ([]byte, error) {
	switch i {
	case Hello:
		return []byte("hello"), nil
	case Goodbye:
		return []byte("goodbye"), nil
	}
	return nil, fmt.Errorf("%v is not a valid teststatus.Status", i)
}

// UnmarshalText implements the text unmarshaller method
func (i *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return err
	}
	*i = tmp
	return nil
}
