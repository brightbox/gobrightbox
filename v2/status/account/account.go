// Code generated by generate_enum; DO NOT EDIT.

package account

import (
	"encoding/json"
	"fmt"
	"reflect"
)

// Status is an enumerated type
type Status uint8

const (
	// Pending is an enumeration for account.Status
	Pending Status = iota + 1
	// Active is an enumeration for Status
	Active
	// Overdue is an enumeration for Status
	Overdue
	// Warning is an enumeration for Status
	Warning
	// Suspended is an enumeration for Status
	Suspended
	// Terminated is an enumeration for Status
	Terminated
	// Closed is an enumeration for Status
	Closed
	// Deleted is an enumeration for Status
	Deleted
)

// Set of strings that are valid inputs for ParseStatus
var ValidStrings = []string{
	Pending.String(),
	Active.String(),
	Overdue.String(),
	Warning.String(),
	Suspended.String(),
	Terminated.String(),
	Closed.String(),
	Deleted.String(),
}

// String makes Status satisfy the Stringer interface
func (i Status) String() string {
	tmp, err := i.MarshalText()
	if err == nil {
		return string(tmp)
	}
	return ""
}

// ParseStatus attempts to convert a string into a Status
func ParseStatus(name string) (Status, error) {
	switch name {
	case "pending":
		return Pending, nil
	case "active":
		return Active, nil
	case "overdue":
		return Overdue, nil
	case "warning":
		return Warning, nil
	case "suspended":
		return Suspended, nil
	case "terminated":
		return Terminated, nil
	case "closed":
		return Closed, nil
	case "deleted":
		return Deleted, nil
	}
	var zero Status
	return zero, fmt.Errorf("%s is not a valid account.Status", name)
}

// MarshalText implements the text marshaller method
func (i Status) MarshalText() ([]byte, error) {
	switch i {
	case Pending:
		return []byte("pending"), nil
	case Active:
		return []byte("active"), nil
	case Overdue:
		return []byte("overdue"), nil
	case Warning:
		return []byte("warning"), nil
	case Suspended:
		return []byte("suspended"), nil
	case Terminated:
		return []byte("terminated"), nil
	case Closed:
		return []byte("closed"), nil
	case Deleted:
		return []byte("deleted"), nil
	}
	return nil, fmt.Errorf("%d is not a valid account.Status", i)
}

// UnmarshalText implements the text unmarshaller method
func (i *Status) UnmarshalText(text []byte) error {
	name := string(text)
	tmp, err := ParseStatus(name)
	if err != nil {
		return &json.UnmarshalTypeError{
			Value: name,
			Type:  reflect.TypeOf(i),
		}
	}
	*i = tmp
	return nil
}
