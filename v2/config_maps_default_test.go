// Code generated by go generate; DO NOT EDIT.

package brightbox

import (
	"path"
	"testing"

	"gotest.tools/v3/assert"
)

func TestConfigMaps(t *testing.T) {
	instance := testAll[ConfigMap](
		t,
		(*Client).ConfigMaps,
		"ConfigMap",
		"config_maps",
		"ConfigMaps",
	)
	assert.Equal(t, instance.ID, "cfg-dsse2")
}

func TestConfigMap(t *testing.T) {
	instance := testInstance[ConfigMap](
		t,
		(*Client).ConfigMap,
		"ConfigMap",
		path.Join("config_maps", "cfg-dsse2"),
		"config_map",
		"cfg-dsse2",
	)
	assert.Equal(t, instance.ID, "cfg-dsse2")
}

func TestCreateConfigMap(t *testing.T) {
	newResource := ConfigMapOptions{}
	instance := testModify[ConfigMap, *ConfigMapOptions](
		t,
		(*Client).CreateConfigMap,
		&newResource,
		"config_map",
		"POST",
		path.Join("config_maps"),
		"{}",
	)
	assert.Equal(t, instance.ID, "cfg-dsse2")
}

func TestUpdateConfigMap(t *testing.T) {
	updatedResource := ConfigMapOptions{ID: "cfg-dsse2"}
	instance := testModify[ConfigMap, *ConfigMapOptions](
		t,
		(*Client).UpdateConfigMap,
		&updatedResource,
		"config_map",
		"PUT",
		path.Join("config_maps", updatedResource.ID),
		"{}",
	)
	assert.Equal(t, instance.ID, updatedResource.ID)
}

func TestDestroyConfigMap(t *testing.T) {
	testCommand(
		t,
		(*Client).DestroyConfigMap,
		"cfg-dsse2",
		"DELETE",
		path.Join("config_maps", "cfg-dsse2"),
	)
}
