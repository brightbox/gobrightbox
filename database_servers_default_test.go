// Code generated by go generate; DO NOT EDIT.

package brightbox

import (
	"path"
	"testing"
	"time"

	"gotest.tools/v3/assert"
)

func TestDatabaseServers(t *testing.T) {
	instance := testAll(
		t,
		(*Client).DatabaseServers,
		"DatabaseServer",
		"database_servers",
		"DatabaseServers",
	)
	assert.Equal(t, instance.ID, "dbs-123ab")
}

func TestDatabaseServer(t *testing.T) {
	instance := testInstance(
		t,
		(*Client).DatabaseServer,
		"DatabaseServer",
		path.Join("database_servers", "dbs-123ab"),
		"database_server",
		"dbs-123ab",
	)
	assert.Equal(t, instance.ID, "dbs-123ab")
}

func TestCreateDatabaseServer(t *testing.T) {
	newResource := DatabaseServerOptions{}
	instance := testModify(
		t,
		(*Client).CreateDatabaseServer,
		newResource,
		"database_server",
		"POST",
		path.Join("database_servers"),
		"{}",
	)
	assert.Equal(t, instance.ID, "dbs-123ab")
}

func TestUpdateDatabaseServer(t *testing.T) {
	updatedResource := DatabaseServerOptions{ID: "dbs-123ab"}
	instance := testModify(
		t,
		(*Client).UpdateDatabaseServer,
		updatedResource,
		"database_server",
		"PUT",
		path.Join("database_servers", updatedResource.ID),
		"{}",
	)
	assert.Equal(t, instance.ID, updatedResource.ID)
}

func TestDestroyDatabaseServer(t *testing.T) {
	deletedResource := testModify(
		t,
		(*Client).DestroyDatabaseServer,
		"dbs-123ab",
		"database_server",
		"DELETE",
		path.Join("database_servers", "dbs-123ab"),
		"",
	)
	assert.Equal(t, deletedResource.ID, "dbs-123ab")
}

func TestLockDatabaseServer(t *testing.T) {
	lockedResource := testModify(
		t,
		(*Client).LockDatabaseServer,
		"dbs-123ab",
		"database_server",
		"PUT",
		path.Join("database_servers", "dbs-123ab", "lock_resource"),
		"",
	)
	assert.Equal(t, lockedResource.ID, "dbs-123ab")
}

func TestUnlockDatabaseServer(t *testing.T) {
	unlockedResource := testModify(
		t,
		(*Client).UnlockDatabaseServer,
		"dbs-123ab",
		"database_server",
		"PUT",
		path.Join("database_servers", "dbs-123ab", "unlock_resource"),
		"",
	)
	assert.Equal(t, unlockedResource.ID, "dbs-123ab")
}

func TestDatabaseServerCreatedAtUnix(t *testing.T) {
	tm := time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC)
	target := DatabaseServer{CreatedAt: &tm}
	assert.Equal(t, target.CreatedAtUnix(), tm.Unix())
}

func TestResetDatabaseServerPassword(t *testing.T) {
	instance := testModify(
		t,
		(*Client).ResetDatabaseServerPassword,
		"dbs-123ab",
		"database_server",
		"POST",
		path.Join("database_servers", "dbs-123ab", "reset_password"),
		"",
	)
	assert.Equal(t, instance.ID, "dbs-123ab")
}

func TestResizeDatabaseServer(t *testing.T) {
	instance := testLink(
		t,
		(*Client).ResizeDatabaseServer,
		"dbs-123ab",
		DatabaseServerNewSize{"dbt-12345"},
		"database_server",
		"POST",
		path.Join("database_servers", "dbs-123ab", "resize"),
		`{"new_type":"dbt-12345"}`,
	)
	assert.Equal(t, instance.ID, "dbs-123ab")
}

func TestResetDatabaseServer(t *testing.T) {
	instance := testModify(
		t,
		(*Client).ResetDatabaseServer,
		"dbs-123ab",
		"database_server",
		"POST",
		path.Join("database_servers", "dbs-123ab", "reset"),
		"",
	)
	assert.Equal(t, instance.ID, "dbs-123ab")
}
